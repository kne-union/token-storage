{"version":3,"file":"static/js/690.be9d73c7.chunk.js","mappings":"0LAEA,MCF+D,GAAgBA,aDE1D,CACjBC,KAAM,gBACNC,QAAS,igBAMTC,YAAa,sFACbC,YAAa,qBACbC,IAAK,ssDA8CLC,QAAS,CACLC,QAAQ,EACRC,UAAW,sBACXC,MAAO,sGAKPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,+rBAgCNC,MAAO,CAAC,CACRZ,KAAM,gBACNG,YAAa,iCACbU,gBAAiB,sDACjBC,U,SACF,CACEd,KAAM,OACNG,YAAa,OACbW,U,eC5GSC,EAAW,CAAC,KAAO,gBAAgB,QAAU,QAAQ,gBAAe,EAAK,aAAa,iBAAiB,QAAU,CAAC,CAAC,KAAO,gBAAgB,QAAU,gDAAgD,YAAc,sFAAqB,YAAc,uB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_token-storage';\nimport * as component_2 from 'antd';\nconst readmeConfig = {\n    name: `token-storage`,\n    summary: `<p>该模块提供了简单的Token存储管理功能，支持两种存储方式：</p>\n<ol>\n<li>同域存储（使用localStorage）</li>\n<li>跨域存储（使用Cookies）</li>\n</ol>\n<p>主要功能包括设置Token、获取Token和移除Token操作，适用于前端身份认证场景。</p>`,\n    description: `用于存储和获取浏览器客户端token`,\n    packageName: `@kne/token-storage`,\n    api: `<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>参数</th>\n<th>返回值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>setToken</code></td>\n<td><code>(tokenValue: string, tokenKey?: string, options?: object)</code></td>\n<td><code>void</code></td>\n<td>设置Token到存储系统</td>\n</tr>\n<tr>\n<td><code>getToken</code></td>\n<td><code>(tokenKey?: string, options?: object)</code></td>\n<td><code>string | null</code></td>\n<td>从存储系统获取Token</td>\n</tr>\n<tr>\n<td><code>removeToken</code></td>\n<td><code>(tokenKey?: string, options?: object)</code></td>\n<td><code>void</code></td>\n<td>从存储系统移除Token</td>\n</tr>\n</tbody>\n</table>\n<h3>参数说明</h3>\n<h4>公共参数</h4>\n<ul>\n<li><code>tokenKey</code>: 可选，默认值 <code>'X-User-Token'</code>，指定存储的键名</li>\n<li><code>options</code>: 可选配置对象，包含：\n<ul>\n<li><code>sameDomain</code>: 布尔值，默认<code>true</code>，是否使用同域存储</li>\n</ul>\n</li>\n</ul>\n<h2>注意事项</h2>\n<ol>\n<li>当<code>sameDomain</code>为<code>true</code>时使用localStorage API，为<code>false</code>时使用Cookies</li>\n<li>默认存储键名为<code>'X-User-Token'</code>，可通过参数自定义</li>\n<li>所有方法都支持可选参数，提供灵活的调用方式</li>\n</ol>`,\n    example: {\n        isFull: false,\n        className: `token_storage_c6887`,\n        style: `.token_storage_c6887 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: tokenStorage } = _TokenStorage;\nconst { Flex, Button, App } = antd;\n\nconst BaseExample = () => {\n  const { message } = App.useApp();\n  return (\n    <Flex gap={12}>\n      <Button\n        onClick={() => {\n          tokenStorage.setToken('X-User-Token', '1234567890');\n        }}>\n        设置token\n      </Button>\n      <Button\n        onClick={() => {\n          message.info('token: ' + tokenStorage.getToken());\n        }}>\n        获取token\n      </Button>\n      <Button\n        onClick={() => {\n          tokenStorage.removeToken();\n        }}>\n        移除token\n      </Button>\n    </Flex>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_TokenStorage\",\n    packageName: \"@kne/current-lib_token-storage\",\n    importStatement: \"import * as _TokenStorage from \\\"@kne/token-storage\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import TokenStorage from '@components/token-storage/README.md';export default {TokenStorage};\nexport const manifest = {\"name\":\"token-storage\",\"version\":\"1.0.0\",\"open-version\":true,\"public-url\":\"/token-storage\",\"modules\":[{\"name\":\"token-storage\",\"baseDir\":\"/home/runner/work/token-storage/token-storage\",\"description\":\"用于存储和获取浏览器客户端token\",\"packageName\":\"@kne/token-storage\"}]};"],"names":["TokenStorage","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component","manifest"],"sourceRoot":""}